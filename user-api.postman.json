{
	"info": {
		"_postman_id": "91d7e8a5-050a-4d14-9831-be3bd5af8435",
		"name": "User API",
		"description": "## **üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –†–∞–±–æ—Ç–∞ —Å API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–≠—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ REST API –Ω–∞ Spring Boot, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n**–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:** Basic Auth\n\n**–õ–æ–≥–∏–Ω:** admin\n\n**–ü–∞—Ä–æ–ª—å:** admin\n\n## **üîß –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π**\n\n### **1\\. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤:\n\n- **GET** ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–¥–Ω–æ–≥–æ –ø–æ ID\n    \n- **POST** ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ)\n    \n- **PUT** ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n    \n- **DELETE** ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID\n    \n\n### **2\\. –†–∞–±–æ—Ç–∞ —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞**\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è multipart/form-data, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.\n\n–ü–æ–ª—è –∑–∞–ø—Ä–æ—Å–∞:\n\n- user ‚Äî JSON-—Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n    \n\n`{`\n\n¬† `\"firstName\": \"–ò–≤–∞–Ω\",`\n\n¬† `\"lastName\": \"–ò–≤–∞–Ω–æ–≤\",`\n\n¬† `\"middleName\": \"–ò–≤–∞–Ω–æ–≤–∏—á\",`\n\n¬† `\"birthDate\": \"1980-01-01\",`\n\n¬† `\"email\": \"ivan@example.com\",`\n\n¬† `\"phoneNumber\": \"+79991234567\"`\n\n`}`\n\n- photo (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –∏–ª–∏ .jpg.\n    \n\n### **3\\. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è**\n\n–ß—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∫–∞–∂–¥—ã–π URL –≤—Ä—É—á–Ω—É—é, –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {{base_url}}. –£–∫–∞–∂–∏ –µ—ë –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\nhttp://localhost:8080/api\n\n### **üß© –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**\n\n- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Basic Auth\n    \n- –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n    \n- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG –∏ JPG\n    \n- –í –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Spring Boot + PostgreSQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25071637"
	},
	"item": [
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user",
							"value": "{\n  \"firstName\": \"Vadim\",\n  \"lastName\": \"Agarkov\",\n  \"middleName\": \"Alan\",\n  \"birthDate\": \"1990-05-10\",\n  \"email\": \"john.doe@example.com\",\n  \"phoneNumber\": \"+79220899999\"\n}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "photo",
							"type": "file",
							"src": "postman-cloud:///1f06eb4e-509f-48d0-bbe0-230ca75c5965"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user",
							"value": "{\n  \"firstName\": \"John 2\",\n  \"lastName\": \"Doe 3\",\n  \"birthDate\": \"1990-05-10\",\n  \"email\": \"john.doe@example.com\",\n  \"phoneNumber\": \"+79991234567\"\n}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080/api"
		}
	]
}